'use strict';

var memberCenter = new Vue({
	el: '#memberCenter',
	data: function data() {
		return {
			// 加载层
			showLoading: true,
			// 分页器显示和隐藏
			showPager: true,
			// 主页及个人中心
			index: '1',
			userData: {
				peopleId: '',
				puNickname: '',
				puRealname: '',
				peoplePhone: '',
				peopleMail: ''
			},
			indicator: '',
			showSaveBtn: true,
			// 我的活动
			noSign: false,
			activityList: [],
			activeName: '4',
			currentPageNo: '1',
			totalPageCount: '',
			showOrderDetail: false,
			orderDialogObj: {
				orderNo: '',
				orderStatus: '',
				signInfoList: [],
				remark: ''
			},
			// 报名信息维护
			addSignInfo: false,
			signInfoList: '',
			editSignObj: {
				name: '',
				mobile: '',
				companyName: '',
				position: '',
				mail: ''
			},
			reg5: '',
			reg6: ''
		};
	},

	computed: {},
	methods: {
		// 主页
		changeTab: function changeTab(key, keyPath) {
			this.index = key;
			this.swithAxiosFn(key);
		},
		swithAxiosFn: function swithAxiosFn(key) {
			var _this = this;

			// debugger;
			if (key == '1') {
				// 个人中心页面 请求user接口
				this.$axios({
					url: apis.getUser,
					method: 'post',
					headers: {
						'Content-Type': 'application/x-www-form-urlencoded'
					}
				}).then(function (res) {
					if (res.data.code == 403) {
						// 让其先登录
						_this.$message('您还未登录，请先登录');
					} else if (res.data.code == 200) {
						// 请求成功  打开代码
						// this.userData = res.body.data;
						_this.userData = {
							"peopleId": 2,
							"puNickname": "唐老鸭",
							"puRealname": "唐劳亚",
							"peoplePhone": "123456789",
							"peopleMail": "123@qq.com"
						};
						_this.showSaveBtn = true;
					} else {
						// 请求失败
						_this.$message(res.data.msg);
					}
				}).catch(function (res) {
					_this.$message(res);
				});
			} else if (key == 2) {
				// 我的活动请求活动列表接口

				// 页宽 一页显示多少条  pageSize  总页数  pageCount 

				var _data1 = Qs.stringify({
					pageNo: 1,
					pageSize: 3
				});
				postXhr({
					self: this,
					url: apis.getMyActivity,
					data: _data1,
					callback: function callback(data) {
						// debugger;
						if (!data || data.entityList == null || !data.entityList.length) {
							_this.noSign = true;
						} else {
							var _data2 = Qs.stringify({
								pageNo: 1,
								pageSize: 3,
								orderStatus: _this.activeName
							});
							postXhr({
								self: _this,
								url: apis.getMyActivity,
								data: _data2,
								callback: function callback(data) {
									// debugger;
									if (!data || data.entityList == null || !data.entityList.length) {
										// this.noSign = true;
										_this.showPager = false;
										_this.activityList = [];
									} else {
										_this.showPager = true;
										_this.activityList = data.entityList;
										_this.currentPageNo = data.pageNo;
										_this.totalPageCount = data.pageCount;
									}
								}
							});
						}
					}
				});
			} else {
				// 报名信息维护请求报名人信息接口
				postXhr({
					self: this,
					url: apis.getSignList,
					callback: function callback(data) {
						_this.signInfoList = data;
					}
				});
			}
		},
		timestampToTime: function timestampToTime(timestamp) {
			var date = new Date(timestamp);
			var Y = date.getFullYear() + '-';
			var M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
			var D = date.getDate() + ' ';
			var h = date.getHours() + ':';
			var m = date.getMinutes() + ':';
			var s = date.getSeconds();
			return Y + M + D + h + m + s;
		},
		activityStatusToText: function activityStatusToText(item) {
			var text = '';
			switch (item.toString()) {
				case '0':
					text = '待审核';
					break;
				case '1':
					text = '报名中';
					break;
				case '2':
					text = '已驳回';
					break;
				case '3':
					text = '报名已截止';
					break;
				case '4':
					text = '已结束';
					break;
				case '5':
					text = '待提交';
					break;
			}
			return text;
		},
		statusToText: function statusToText(item) {
			var text = '';
			switch (item.toString()) {
				case '0':
					text = '待审核';
					break;
				case '1':
					text = '待支付';
					break;
				case '2':
					text = '已取消';
					break;
				case '3':
					text = '已驳回';
					break;
				case '4':
					text = '已完成';
					break;
			}
			return text;
		},

		// 个人中心
		saveUserData: function saveUserData() {
			var _this2 = this;

			if (!this.userData.puNickname) {
				this.$message('您的昵称不能为空');
				return false;
			}
			if (!this.userData.puRealname) {
				this.$message('您的姓名不能为空');
				return false;
			}
			postXhr({
				self: this,
				url: apis.updateUser,
				data: {
					puNickname: this.userData.puNickname,
					puRealname: this.userData.puRealname
				},
				callback: function callback() {
					_this2.showSaveBtn = false;
				}
			});
		},


		// 我的活动
		changeStatus: function changeStatus() {
			var _this3 = this;

			var _data = Qs.stringify({
				pageNo: 1,
				pageSize: 3,
				orderStatus: this.activeName
			});
			postXhr({
				self: this,
				url: apis.getMyActivity,
				data: _data,
				callback: function callback(data) {
					if (!data || data.entityList == null || !data.entityList.length) {
						// this.noSign = true;
						_this3.showPager = false;
						_this3.activityList = [];
					} else {
						_this3.showPager = true;
						_this3.activityList = data.entityList;
						_this3.currentPageNo = data.pageNo;
						_this3.totalPageCount = data.pageCount;
					}
				}
			});
		},
		closeOrderDetailFn: function closeOrderDetailFn() {
			this.showOrderDetail = false;
		},
		showOrderDetailFn: function showOrderDetailFn(obj) {
			var _this4 = this;

			this.orderDialogObj.orderNo = obj.orderNo;
			this.orderDialogObj.orderStatus = obj.status;
			this.orderDialogObj.ticketName = obj.ticketName;
			this.orderDialogObj.remark = obj.auditOpinion;
			// 请求订单详情接口
			postXhr({
				self: this,
				url: apis.getActivityDetail,
				data: Qs.stringify({ orderId: obj.id }),
				callback: function callback(data) {
					_this4.orderDialogObj.signInfoList = data;
					_this4.showOrderDetail = true;
				}
			});
		},
		statusToClass: function statusToClass(item) {
			var className = '';
			switch (item.toString()) {
				case '0':
				case '1':
				case '3':
					className = 'warn';
					break;
				case '2':
					className = 'default';
					break;
				case '4':
					className = 'finished';
					break;
			}
			return className;
		},
		handleCurrentChange: function handleCurrentChange(val) {
			var _this5 = this;

			this.currentPageNo = val;
			var _data = Qs.stringify({
				pageNo: val,
				pageSize: 3,
				orderStatus: this.activeName
			});
			postXhr({
				self: this,
				url: apis.getMyActivity,
				data: _data,
				callback: function callback(data) {
					if (data.entityList == null || !data.entityList.length) {
						// this.noSign = true;
					} else {
						_this5.activityList = data.entityList;
						_this5.currentPageNo = data.pageNo;
						_this5.totalPageCount = data.pageCount;
					}
				}
			});
		},
		toPayPage: function toPayPage(activityId, orderNo) {
			// 去支付页面
			// location.href = "/html/1/163/171/175/index.html?id="+activityId+'&orderNo='+orderNo;

		},

		// 报名信息维护
		closeSignPopFn: function closeSignPopFn() {
			this.addSignInfo = false;
		},
		openSignPopFn: function openSignPopFn() {
			this.editSignObj = {
				name: '',
				mobile: '',
				companyName: '',
				position: '',
				mail: ''
			};
			this.addSignInfo = true;
		},
		saveSignObjFn: function saveSignObjFn() {
			var _this6 = this;

			if (!this.editSignObj['name'] || !this.editSignObj['mobile'] || !this.editSignObj['companyName'] || !this.editSignObj['position'] || !this.editSignObj['mail']) {
				this.$message('您有必填项,请填写完整');
				return false;
			}
			// 请求保存报名人信息的接口
			var _data = Qs.stringify(this.editSignObj);
			postXhr({
				self: this,
				url: apis.saveSignInfo,
				data: _data,
				callback: function callback(data) {
					// 操作成功的再次请求报名人列表
					postXhr({
						self: _this6,
						url: apis.getSignList,
						callback: function callback(data) {
							_this6.signInfoList = data;
							_this6.addSignInfo = false;
						}
					});
				}
			});
		},
		checkNullFn: function checkNullFn(val) {
			if (val == '') {
				this.$message('该字段不能为空');
			}
		},
		checkPhoneFn: function checkPhoneFn() {
			var reg = /^[1][3,4,5,7,8][0-9]{9}$/;
			if (!reg.test(this.editSignObj.mobile)) {
				this.indicator = 'phone';
				this.$message('您的手机号不符合格式，请重新输入');
				this.reg5 = false;
			} else {
				this.reg5 = true;
				this.indicator = '';
			}
		},
		checkMailFn: function checkMailFn() {
			var reg = /^[a-zA-Z0-9_.-]+@[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)*\.[a-zA-Z0-9]{2,6}$/;
			if (!reg.test(this.editSignObj.mail)) {
				this.indicator = 'mail';
				this.$message('您的邮箱不符合格式，请重新输入');
				this.reg6 = false;
			} else {
				this.reg6 = true;
				this.indicator = '';
			}
		},
		editFn: function editFn(index) {
			this.editSignObj = this.signInfoList[index];
			this.addSignInfo = true;
		},
		delFn: function delFn(index) {
			var _this7 = this;

			var _data = Qs.stringify({ id: this.editSignObj.id });
			postXhr({
				self: this,
				url: apis.delSignInfo,
				data: _data,
				callback: function callback(data) {
					_this7.signInfoList.splice(index, 1);
				}
			});
		},
		setDefaultFn: function setDefaultFn(index) {
			var _this8 = this;

			var _data = Qs.stringify({ id: this.editSignObj.id });
			postXhr({
				self: this,
				url: apis.setDefaultSign,
				data: _data,
				callback: function callback(data) {
					// 设置默认值后重新请求列表
					postXhr({
						self: _this8,
						url: apis.getSignList,
						callback: function callback(data) {
							_this8.signInfoList = data;
							_this8.addSignInfo = false;
						}
					});
				}
			});
		}
	},
	created: function created() {
		this.showOrderDetail = false;
		this.swithAxiosFn(1);
	},
	mounted: function mounted() {
		// loading弹框
		this.showLoading = false;
	}
});
//# sourceMappingURL=maps/memberCenter.min.js.map
